import Head from 'next/head'
import { Crypto } from '@/components/crypto'
import styles from '@/styles/Home.module.css'
import { ChangeEvent, useState } from 'react'

export default function Home() {

  const [isHandledFile, setHandledFile] = useState(false);
  const [encryptKey, setEncryptKey] = useState('');
  const [decryptKey, setDecryptKey] = useState('');
  const [hashOrginal, setHashOrginal] = useState('');
  const [hashCipherText, setHashCipherText] = useState('');
  const [hashPlainText, setHashPlainText] = useState('');

  const handleEncryptKeyChange = function(e: ChangeEvent<HTMLInputElement>) {
    setEncryptKey(e.target.value.toString());
  }

  const handleDecryptKeyChange = function(e: ChangeEvent<HTMLInputElement>) {
    setDecryptKey(e.target.value.toString());
  }

  const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) {
      console.error("Select a file");
      return;
    }

    const length = e.target.files.length;
    const file = e.target.files[length - 1];
    const buffer = await file.arrayBuffer();
    const bytes = new Uint8Array(buffer);
    const hashOrginal = await Crypto.sha256(Crypto.convertArrayToHexString(Array.from(bytes)));
    setHashOrginal(hashOrginal!);

    const encKey = await Crypto.generateKey(encryptKey);
    const decKey = await Crypto.generateKey(decryptKey);

    const iv = Crypto.generateIVValue();

    const cipherText = await Crypto.encryption(bytes, encKey!, iv!);
    if (cipherText) {
      const hashCipherText = await Crypto.sha256(Crypto.convertArrayToHexString(Array.from(cipherText!)));
      setHashCipherText(hashCipherText!)
    } 

    const plainText = await Crypto.decryption(cipherText!, decKey!, iv!);
    if (plainText) {
      const hashPlainText = await Crypto.sha256(Crypto.convertArrayToHexString(Array.from(plainText!)));
      setHashPlainText(hashPlainText!)
    } else {
      const hashPlainText = await Crypto.sha256(Crypto.convertArrayToHexString([0]));
      setHashPlainText(hashPlainText!);
    }

    setHandledFile(true);
  
  }

  return (
    <>
      <Head>
        <title>Hash Book</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <div>
            <span>Key encrypt: </span>
            <input type="text" onChange={handleEncryptKeyChange} />
            <span>Key decrypt: </span>
            <input type="text" onChange={handleDecryptKeyChange} />
          </div>

          <div>
            <span>Upload a file: </span>
            <input type="file" onChange={handleFile}/>
          </div>

          <div>
            <h3>Hash original content: </h3>
            <p>{
                  hashOrginal ? hashOrginal : ''
              }
            </p>
          </div>

          <div>
            <h3>Hash cipher text content: </h3>
            <p>{
                  hashCipherText ? hashCipherText : ''
              }
            </p>
          </div>

          <div>
            <h3>Hash plain text content: </h3>
            <p>{
                  hashPlainText ? hashPlainText : ''
              }
            </p>
          </div>

          <div>
            <h3>
              {
                (encryptKey && isHandledFile ? 
                  ((hashPlainText === hashOrginal) ?
                    'The original content is the same as the decrypt content': 
                    'The original content is NOT the same as the decrypt content') :
                  '')
              }
            </h3>
          </div>


        </div>
      </main>
    </>
  )
}
